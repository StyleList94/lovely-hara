<script is:inline>
  function css(strings) {
    return strings.join('').trim();
  }

  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return 'system';
  };

  const resolveTheme = (theme) => {
    if (theme === 'system') {
      theme = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light';
    }
    document.documentElement.classList[theme === 'dark' ? 'add' : 'remove'](
      'dark',
    );
  };

  let currentTheme = getThemePreference();
  resolveTheme(currentTheme);

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const currentTheme = getThemePreference();
      if (currentTheme !== 'system') {
        const isDark = document.documentElement.classList.contains('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
      }

      const style = document.createElement('style');
      style.textContent = css`
        *,
        *::before,
        *::after {
          transition: none !important;
        }
      `;
      document.head.appendChild(style);

      setTimeout(() => {
        document.head.removeChild(style);
      }, 10);
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class'],
    });
  }

  const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
  const handleChangeTheme = () => {
    if (
      typeof localStorage !== 'undefined' &&
      getThemePreference() === 'system'
    )
      resolveTheme('system');
  };
  mediaQuery.addEventListener('change', handleChangeTheme);
</script>
